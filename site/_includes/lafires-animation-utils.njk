<script>
// UTILS
function mapv(v, in_min, in_max, out_min, out_max) {
  return (v-in_min) * (out_max-out_min) / (in_max-in_min) + out_min;
}

function clamp(v, min, max) {
  return Math.max(min, Math.min(v, max));
}

function dot_distance(da, db) {
  let dx = da.tx - db.tx;
  let dy = da.ty - db.ty;
  return Math.sqrt(dx*dx + dy*dy);
}
function dot_angle(da, db) {
  let dx = db.tx - da.tx;
  let dy = db.ty - da.ty;
  return Math.atan2(dy, dx);
}

function ease_in_out(t) {
  let k = t*t*(3-2*t);
  return k;
}

function ease_in(t) {
  return t*t;
}

function ease_out(t) {
  return 1-ease_in(1-t);
}

function compute_color(r) {
  // let r = cx/1200;
  let hue,sat,val;
  if (r < 0.5) {
    sat = Math.round(clamp(mapv(r, 0, 0.5, 76, 0),0,76)*100)/100;
    val = Math.round(clamp(mapv(r, 0, 0.5, 61, 85),61,85)*100)/100;
  } else {
    sat = Math.round(clamp(mapv(r, 0.5, 1, 0, 32),0,32)*100)/100;
    val = Math.round(clamp(mapv(r, 0.5, 1, 85, 48),48,85)*100)/100;
  }
  hue = Math.round(clamp(mapv(r,0.45, 0.55, 27, 200), 27, 200)*100)/100;
  return "hsl(" + hue + ", " + sat + "%, " + val + "%)";
}

{# // color debugging
for (let i = 0; i < 7; ++i) {
  let color = compute_color(i/6);
  // console.log("color",i+1, color);
} #}

</script>
