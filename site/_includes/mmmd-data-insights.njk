{% extends "layout.njk" %}
{% block content %}
<style>
.quote-card {
  background-color: #f0f0f0;
  padding: 10px;
  border-radius: 5px;
  max-width: 500px;
  {# margin: 0 auto; #}
}
.plot-row {
  position: relative;
}
.quote-card {
  position: fixed;
  width: 100%;
  opacity: 0.8;
  z-index: 1000;
}
.responsive-svg-container svg {
  width: 100%;
  height: auto;
  max-width: 100%;
  position: relative;
}
.plot-title {
  font-size: 1.5rem;
  font-weight: 600;
  text-align: left;
  {# max-width: 50%; #}
  {# position: absolute;
  top: 0px;
  left: 50px; #}
}
div.plot-legend {
  margin-top: 20px;
}

@media (orientation: landscape) {
  .responsive-svg-container {
    display: flex;
    flex-wrap: wrap;
  }
  
  .plot-title {
    width: 100%;
  }
  
  .plot-plot {
    width: 65%;
  }
  
  div.plot-legend {
    width: 35%;
    margin-top: 0;
    padding-left: 10px;
  }
}

</style>
<section id="plots-overview">
  <div class="container">
    <div class="row">
      <div class="col-lg-12">
        {{ modules.plots_overview.content | safe }}
      </div>
    </div>
  </div>
</section>

<div class="quote-card" style="display: none;">
  <div class="quote-card-content">
  </div>
</div>


{% for i in range(1, 6) %}
<section id="plot-{{ i }}">
  <div class="container">
    <div class="row plot-row">
      <div class="col-lg-12 responsive-svg-container">
            <div class="plot-title">
              {{ modules.plots["title_" + i] }}
            </div>
            <div class="plot-plot">
            {{ ('./src/public/images/' + modules.plots["plot_" + i]) | getFileContents | safe }}
            </div>
            <div class="plot-legend">
              {{ ('./src/public/images/' + modules.plots["legend_" + i]) | getFileContents | safe }}
            </div>
      </div>
    </div>
  </div>
</section>
{% endfor %}





<script>
quoteData = null;

function revealQuote(cid, evt, is_touch) {
  const mouseX = evt.clientX;
  const mouseY = evt.clientY;
  if (quoteData == null) {
    console.log('No quote data found');
    return;
  }
  const quote = quoteData.find(q => q.COMMENT_ID === cid);
  if (quote) {
    document.querySelector('.quote-card-content').innerHTML = quote.CONTENT;
  } else {
    console.log('No quote found for comment_id:', cid);
  }

  // Position the quote card 20px to the right and 200px above the cursor
  const quoteCard = document.querySelector('.quote-card');
  if (is_touch) {
    quoteCard.style.left = '0px';
    quoteCard.style.top = (mouseY + 20) + 'px';
  } else {
    quoteCard.style.left = (mouseX + 20) + 'px';
    quoteCard.style.top = (mouseY - 100) + 'px';
  }
  
  // Clear any previously set positioning styles that might interfere
  quoteCard.style.right = 'auto';
  quoteCard.style.bottom = 'auto';


  document.querySelector('.quote-card').style.display = 'block';
}

function hideQuote() {
  document.querySelector('.quote-card-content').innerHTML = '';
  document.querySelector('.quote-card').style.display = 'none';
}


document.addEventListener('DOMContentLoaded', function() {
    fetch("/public/data/engca_comment_scatterplot_source.json", {})
    .then(response => response.json())
    .then(data => {
      // console.log("Data fetched:", data);
      quoteData = data;
    })
    .catch(error => {
      console.error("Error fetching data:", error);
    });

 
  // Direct access to SVG elements since they're now in the DOM
  const datapoints = document.querySelectorAll('.datapoint');
  // console.log("Found datapoints:", datapoints.length);



  // Set up event handlers for datapoints in plots
  datapoints.forEach(datapoint => {
    // Add hover effect
    datapoint.addEventListener('mouseenter', function(e) {
      this.setAttribute('r', '8'); // Increase radius on hover
      this.style.cursor = 'pointer';
      const comment_id = parseInt(this.getAttribute('data-cid'));
      if (isNaN(comment_id)) {
        console.log('Datapoint clicked with invalid comment_id:', this.getAttribute('data-cid'));
        return;
      }
      revealQuote(comment_id, e, false);
    });
    
    datapoint.addEventListener('touchstart', function(e) {
      this.setAttribute('r', '8'); // Increase radius on touch
      const comment_id = parseInt(this.getAttribute('data-cid'));
      if (isNaN(comment_id)) {
        console.log('Datapoint touched with invalid comment_id:', this.getAttribute('data-cid'));
        return;
      }
      revealQuote(comment_id, e, true);
    });
    
    datapoint.addEventListener('mouseleave', function() {
      this.setAttribute('r', '5'); // Reset radius when not hovering
      hideQuote();
    });
    
    datapoint.addEventListener('touchend', function() {
      this.setAttribute('r', '5'); // Reset radius when touch ends
      hideQuote();
    });
    
    // Add click handler
    {# datapoint.addEventListener('click', function(e) {
      const comment_id = parseInt(this.getAttribute('data-cid'));
      // if not a valid integer when converted to int, return early
      if (quoteData == null) {
        console.log('No quote data found');
        return;
      }
      if (isNaN(comment_id)) {
        console.log('Datapoint clicked with invalid comment_id:', this.getAttribute('data-cid'));
        return;
      }
      revealQuote(comment_id, e, false);
      // console.log('Datapoint clicked:', comment_id);
      // You can add more functionality here, like showing details about the point
    }); #}
  });
});
</script>

{% endblock %}