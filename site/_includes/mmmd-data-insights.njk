{% extends "layout.njk" %}
{% block content %}
<style>
.quote-card {
  background-color: #f0f0f0;
  padding: 10px;
  border-radius: 5px;
}
</style>
<section id="plots-overview">
  <div class="container">
    <div class="row">
      <div class="col-lg-12">
        {{ modules.plots_overview.content | safe }}
      </div>
    </div>
  </div>
</section>

<section id="plot-1">
  <div class="container">
    <div class="row">
      <div class="col-lg-12 responsive-svg-container">
            {{ './src/public/images/public_private.svg' | getFileContents | safe }}
      </div>
      <div class="quote-card">
        <div class="quote-card-content">
        </div>
      </div>
    </div>
  </div>
</section>
<style>
.responsive-svg-container svg {
  width: 100%;
  height: auto;
  max-width: 100%;
}
</style>
<script>
quoteData = null;
document.addEventListener('DOMContentLoaded', function() {
    fetch("/public/data/engca_comment_scatterplot_source.json", {})
    .then(response => response.json())
    .then(data => {
      console.log("Data fetched:", data);
      quoteData = data;
    })
    .catch(error => {
      console.error("Error fetching data:", error);
    });

  // Set up event handlers for datapoints in plots
  console.log("Setting up event handlers for datapoints in plots");
  // Set up event handlers for datapoints in plots
  console.log("Setting up event handlers for datapoints in plots");
  
  // Direct access to SVG elements since they're now in the DOM
  const datapoints = document.querySelectorAll('.datapoint');
  console.log("Found datapoints:", datapoints.length);
  
  datapoints.forEach(datapoint => {
    // Add hover effect
    datapoint.addEventListener('mouseenter', function() {
      this.setAttribute('r', '8'); // Increase radius on hover
      this.style.cursor = 'pointer';
    });
    
    datapoint.addEventListener('mouseleave', function() {
      this.setAttribute('r', '5'); // Reset radius when not hovering
    });
    
    // Add click handler
    datapoint.addEventListener('click', function() {
      const comment_id = parseInt(this.getAttribute('data-cid'));
      // if not a valid integer when converted to int, return early
      if (quoteData == null) {
        console.log('No quote data found');
        return;
      }
      if (isNaN(comment_id)) {
        console.log('Datapoint clicked with invalid comment_id:', this.getAttribute('data-cid'));
        return;
      }
      const quote = quoteData.find(q => q.COMMENT_ID === comment_id);
      if (quote) {
        document.querySelector('.quote-card-content').innerHTML = quote.CONTENT;
      } else {
        console.log('No quote found for comment_id:', comment_id);
      }
      console.log('Datapoint clicked:', comment_id);
      // You can add more functionality here, like showing details about the point
    });
  });
});
</script>

{% endblock %}