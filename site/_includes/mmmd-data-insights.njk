{% extends "layout.njk" %}
{% block content %}

<section id="plots-overview" class="hero">
  <div class="container">
    <div class="row">
      <div class="col-lg-8">
        <div class="insights-back-button-container">
          <img src="/public/images/back_bracket_blue.png" aria-hiddent="true" alt="" class="insights-back-button-icon" />
          <a href="{{ "/lafires-recovery/agenda-setting-findings/" | locale_url }}" class="insights-back-button">
            {{ modules.plots_overview.backButtonText }}
          </a>
        </div>
        {{ modules.plots_overview.content | safe }}
      </div>
    </div>
    <a href="#download-the-data" data-appearance="button" data-theme="orange">
      {{ modules.plots_overview.buttonText }}
    </a> 
    <img class="data-insights-adornment" src="/public/images/data-insights-adornment-1.png" aria-hidden="true" alt="" />
  </div>
</section>

<section id="plots-complexity">
  <div class="container">
    <div class="row">
      <div class="col-lg-8">
        {{ modules.plots_complexity.content | safe }}
      </div>
    </div>
  </div>
</section>

<section id="plots-interpretation">
  <div class="container">
    <div class="row">
      <div class="col-lg-8">
        {{ modules.plots_interpretation.content | safe }}
      </div>
    </div>
  </div>
</section>

<section id="data-visualizations">
  <div class="container">
    <div class="row">
      <div class="col-lg-12">
        {{ modules.data_visualizations_header.content | safe }}

      </div>
    </div>
  </div>
</section>


<div class="quote-card" style="display: none;">
  <div class="quote-card-content">
  </div>
</div>

<section id="plot-selection-pulldown">
  <div class="container">
    <div class="row">
      <div class="col-lg-8">
        <div id="plot-selection-container" class="plot-selection-container container collapsed">
            {% for i in range(1, modules.plots.nbr_charts+1) %}
            <div class="plot-selection-item {{ 'active' if loop.first else '' }}" data-plot-id="{{ modules.plots["id_" + i] }}" data-plot-idx="{{ i }}">
              <div class="plot-selection-item-title">
                {{ modules.plots["title_" + i] }}
              </div> 
            </div>
            {% endfor %}
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<section id="plot-section">
  <div class="container">
    <div class="row">
      <div class="col-lg-8">


        {% for i in range(1, modules.plots.nbr_charts+1) %}
        {% set legend_key = modules.plots["id_" + i] %}
        {% set legend_data = dvlegends[legend_key] %}
        <div class="container plot-section-container {{ 'active' if loop.first else '' }}" id="{{ modules.plots["id_" + i] }}" data-plot-id="{{ modules.plots["id_" + i] }}" data-plot-idx="{{ i }}">
          <div class="row plot-row">
            <div class="col-lg-12 responsive-svg-container">
                  <div class="plot-description">
                    {{ modules.plots["desc_" + i] }}
                  </div>
                  <div class="plot-title">
                    {{ modules.plots.chart_boilerplate_title }}
                  </div>
                  <div class="plot-notes">
                    {{ modules.plots.chart_boilerplate_notes }}
                  </div>
                  <div class="sr-only">{{ modules.plots.chart_generic_alt }}</div>
                  <div class="plot-plot">
                  {{ ('./src/public/images/' + modules.plots["id_" + i] + '.svg') | getFileContents | safe }}
                  </div>
                  <div class="plot-legend-title">
                    {{ modules.plots.chart_legend_title }}
                  </div>
                  <div class="plot-legend-notes">
                    {{ modules.plots.chart_legend_notes }}
                  </div>
                  <div class="plot-legend">
                    {% for legend_item in legend_data %}
                    {% set translation_key = 'legends_' + legend_item.key %}
                    <div class="legend-item collapsed" data-nbr-comments="{{ legend_item.comment_ids.length }}" data-comment-ids="{{ legend_item.comment_ids | join(',') }}">
                      <div class="legend-item-header">
                        <div class="legend-item-color legend-circle " style="background-color: {{ legend_item.color }}"></div>
                        <div class="legend-item-label">{{ translation_key | i18n  }}</div>
                      </div>
                      <div class="legend-item-expansion-block" id="{{ translation_key }}">
                        <div class="legend-item-content" data-parent-id="{{ translation_key }}"></div>
                      </div>
                    </div>
                    {% endfor %}
                    {# {{ ('./src/public/images/' + modules.plots["id_" + i] + '_' + lang + '_legend.svg') | getFileContents | safe }} #}
                  </div>

            </div>
          </div>
        </div>
        {% endfor %}
      </div>
    </div>
  </div>
</section>

<section id="insights-back-button-section">
  <div class="container">
    <div class="row">
      <div class="col-lg-8">
            <div class="insights-back-button-container">
              <img src="/public/images/back_bracket_blue.png" alt="<" class="insights-back-button-icon" />
              <a href="{{ "/lafires-recovery/agenda-setting-findings/" | locale_url }}#findings-topics-people-rated" class="insights-back-button">
                {{ modules.plots_overview.backButtonText }}
              </a>
            </div>
      </div>
    </div>
  </div>
</section>

<section id="how-we-built">
  <div class="container">
    <div class="row">
      <div class="col-lg-8">
        {# <div class="insights-back-button-container">
        <a href="/lafires-recovery/agenda-setting-findings/" class="insights-back-button">
          {{ modules.how_we_built.backButtonText }}
        </a>
        </div> #}
        {{ modules.how_we_built.content | safe }}
        <ol>
          {% for i in range(1, modules.how_we_built.nbr_list_items+1) %}
          <li>
            <div class="how-we-built-list-item">{{ modules.how_we_built["list_item_" + i] }}</div>
            <div class="how-we-built-list-content">{{ modules.how_we_built["list_content_" + i] }}</div>
          </li>
          {% endfor %}
        </ol>
      </div>
    </div>
  </div>
</section>

<section id="download-the-data" class="action-hero">
  <div class="container">
    <div class="row">
      <div class="col-lg-8">

        {{ modules.download_the_data_1.content | safe }}

        <a href="/public/data/wildfire_agenda_setting_comments.csv" download data-appearance="button" data-theme="orange">
          {{ modules.download_the_data_1.buttonText }}
        </a> 

      </div>
    </div>
    <img class="download-the-data-adornment" src="/public/images/download-the-data-adornment.png" aria-hidden="true" alt="" />
  </div>
</section>

<section id="data-definitions">
  <div class="container">
    <div class="row">
      <div class="col-lg-8">
        {{ modules.data_definitions.content | safe }}

      </div>
    </div>
  </div>
</section>



<script>
quoteData = null;
const lang = "{{ lang }}";
const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

function revealQuote(cid, evt, bgFillColor) {
  const mouseX = evt.clientX;
  const mouseY = evt.clientY;
  if (quoteData == null) {
    console.log('No quote data found');
    return;
  }
  const quote = quoteData.find(q => q.COMMENT_ID === cid);
  if (quote) {
    document.querySelector('.quote-card-content').innerHTML = '“' + quote.CONTENT + '”';
    document.querySelector('.quote-card').style.backgroundColor = bgFillColor;
  } else {
    console.log('No quote found for comment_id:', cid);
  }

  // This compensates for current zoom level to make the quote more readable if you are zoomed in or zoomed out
  // which helps for mobile devices.
  const desiredFontSize = 1;
  const devicePixelRatio = window.devicePixelRatio || 1;
  const actualZoom = (( window.outerWidth - 10 ) / window.innerWidth);

   
  // For Retina displays, we might want a slightly larger base size
  console.log('Actual zoom:', actualZoom);
   
  // Adjust for browser zoom (higher zoom should make font smaller, so we can still read quote)
  const quoteCard = document.querySelector('.quote-card');
  quoteCard.style.fontSize = `${desiredFontSize / actualZoom}rem`;
  // quoteCard.style.maxWidth = `${500 / actualZoom}px`;

  const isPortrait = window.innerWidth < window.innerHeight;

  if (isPortrait) {
    // quote is beneath cursor and uses available window width
    quoteCard.style.left = '20px';
    quoteCard.style.right = 'auto';
    quoteCard.style.top = (mouseY + 20/actualZoom) + 'px';
    // set maxWidth to smaller of 500px or (window.innerWidth-20-mouseX)
    quoteCard.style.maxWidth = (window.innerWidth-40) + 'px';
  } else {
    // quote is to the right (or left in Farsi) of cursor
    if (lang == "fa") {
      quoteCard.style.right = window.innerWidth - (mouseX - 20/actualZoom) + 'px';
      quoteCard.style.left = 'auto';
    } else {
      quoteCard.style.left = (mouseX + 20/actualZoom) + 'px';
      quoteCard.style.right = 'auto';
    }
    
    quoteCard.style.left = (mouseX + 20/actualZoom) + 'px';
    quoteCard.style.top = (mouseY - 100/actualZoom) + 'px';
    // set maxWidth to smaller of 500px or (window.innerWidth-20-mouseX)
    quoteCard.style.maxWidth = Math.min(500, (window.innerWidth-20-mouseX)/actualZoom) + 'px';
  }
  
  // Clear any previously set positioning styles that might interfere
  quoteCard.style.bottom = 'auto';


  document.querySelector('.quote-card').style.display = 'block';
}

function hideQuote() {
  document.querySelector('.quote-card-content').innerHTML = '';
  document.querySelector('.quote-card').style.display = 'none';
}

function loadChart(plotId, forceOpen=false) {
  console.log('Loading chart:', plotId);
  const plotSelectionItem = document.querySelector('.plot-selection-item[data-plot-id="' + plotId + '"]');

  const allPlotSectionItems = document.querySelectorAll('.plot-selection-item');

  const plotSection = document.querySelector('.plot-section-container[data-plot-id="' + plotId + '"]');
  const plotSelectionContainer = document.getElementById('plot-selection-container');
  let is_collapsed = plotSelectionContainer.classList.contains('collapsed');
  if (is_collapsed && !forceOpen) {
    plotSelectionContainer.classList.remove('collapsed');
  } else {

    plotSelectionContainer.classList.remove('collapsed');

    if (plotSection) {
      plotSection.classList.add('active');
    }
    const allPlotSections = document.querySelectorAll('.plot-section-container');
    allPlotSections.forEach(section => {
      if (section.getAttribute('data-plot-id') !== plotId) {
        section.classList.remove('active');
      }
    });

    // selector buttons
    plotSelectionItem.classList.add('active');
    const allSelectorButtons = document.querySelectorAll('.plot-selection-item');
    allSelectorButtons.forEach(button => {
      if (button.getAttribute('data-plot-id') !== plotId) {
        button.classList.remove('active');
      }
    });
    plotSelectionContainer.classList.add('collapsed');
  }
}

function chartSelectionHandler(e) {
  const plotId = this.getAttribute('data-plot-id');
  loadChart(plotId);
}

function legendItemHandler(e) {
  const legendItem = this;
  let is_collapsed = legendItem.classList.contains('collapsed');
  if (is_collapsed) {
    legendItem.classList.remove('collapsed');
  } else {
    legendItem.classList.add('collapsed');
  }
  is_collapsed = !is_collapsed;
  const nbrComments = legendItem.getAttribute('data-nbr-comments');
  const commentIds = legendItem.getAttribute('data-comment-ids');
  console.log('Legend item clicked:', nbrComments, commentIds);

  const legendItemContent = legendItem.querySelector('.legend-item-content');
  const parentId = legendItemContent.getAttribute('data-parent-id');
  const parentElement = document.getElementById(parentId);
  if (!is_collapsed) {
    let comment_list = '';
    const commentIdsArray = commentIds.split(',');
    for (let i = 0; i < nbrComments; i++) {
      comment_list += '<div class="legend-item-comment-item">';
      const cid = parseInt(commentIdsArray[i]);
      console.log("Looking up quote with comment id ", cid);
      const quote = quoteData.find(q => q.COMMENT_ID === cid);
      comment_list += '“' + quote.CONTENT + '”';
      comment_list += '</div>';
    }
    legendItemContent.innerHTML = comment_list;
    if (parentElement) {
      setLegendFade(parentElement, legendItemContent);
    }
  } else {
    legendItemContent.innerHTML = '';
  }
}

function setLegendFade(elem, childElement) {
    // Remove both classes first
    elem.classList.remove('fade-top', 'fade-bottom');
    // If not at the very top, add fade-top
    if (childElement.scrollTop > 0) {
      console.log('Adding fade-top');
      elem.classList.add('fade-top');
    }
    // If not at the very bottom, add fade-bottom
    if (childElement.scrollTop + childElement.clientHeight < childElement.scrollHeight - 1) {
      console.log('Adding fade-bottom');
      elem.classList.add('fade-bottom');
    }

}

function handleLegendItemContentScroll(e) {
  const el = e.target;
  // Get the immediate parent of the element
  const parentId = el.getAttribute('data-parent-id');
  const parentElement = document.getElementById(parentId);
  if (parentElement) {
    setLegendFade(parentElement, el);
  }
}

// Attach scroll handler to all .legend-item-content elements (on DOMContentLoaded or dynamically as needed)
function openSelectedChart() {
  const hash = window.location.hash;

if (hash && hash.startsWith('#findings_')) {
  console.log("Intercepted hash: ", hash);
  const targetId = hash.substring(1); // remove the #
  
  // Optional: Replace the hash in the URL without scrolling
  // history.replaceState(null, '', '#data-visualization');

  // Scroll to a specific section instead of the default - delay by 500 to avoid fighting with the default scroll behavior
  setTimeout(function() {
    const scrollTarget = document.getElementById('data-visualizations');
    if (scrollTarget) {
      scrollTarget.scrollIntoView({ behavior: 'smooth' });
    }
  }, 500);

  // Do additional work, e.g. load the appropriate chart
  loadChart(targetId, true); // use full ID, like 'findings_123'
}
}

document.addEventListener('DOMContentLoaded', function() {
    fetch("/public/data/engca_comment_scatterplot_source.json", {})
    .then(response => response.json())
    .then(data => {
      // console.log("Data fetched:", data);
      quoteData = data;
    })
    .catch(error => {
      console.error("Error fetching data:", error);
    });

    const color_bg_table = {
      '#5ed0b9': '#DDF4EF',
      '#70b6e5': '#E0EFF9',
      '#b98acb': '#EFE5F3',
      '#ee8176': '#FBE4E1',
      '#f9c280': '#FFF4E4',
      '#f7e79c': '#FFF4E4',
      '#c2c2f0': '#E4F2FF',
      'lightgray': '#F7F7F7'
    }

  
  let expandHandler = function(e) {
    this.querySelector('.visible').setAttribute('r', '8'); // Increase radius on hover
    this.style.cursor = 'pointer';
    const comment_id = parseInt(this.getAttribute('data-cid'));
    const firstChild = this.firstElementChild;
    let bgFillColor = '#F0F0F0';
    if (firstChild) {
      const fillColor = firstChild.getAttribute('fill');
      if (fillColor in color_bg_table) {
        bgFillColor = color_bg_table[fillColor];
      }
      console.log("BGFill Color: ", bgFillColor);
    }
    if (isNaN(comment_id)) {
      console.log('Datapoint clicked with invalid comment_id:', this.getAttribute('data-cid'));
    }
    revealQuote(comment_id, e, bgFillColor);
  }

  let shrinkHandler = function(e, autoHide=false) {
    this.querySelector('.visible').setAttribute('r', '5'); // Decrease radius on hover
    if (autoHide) {
      hideQuote();
    }
  }



  const plotSelectionItems = document.querySelectorAll('.plot-selection-item');
  plotSelectionItems.forEach(item => {
    item.addEventListener('click', chartSelectionHandler);
  });

  document.addEventListener('click', function(event) {
    const plotSelectionContainer = document.querySelector('.plot-selection-container');
    if (!plotSelectionContainer) return;
    // Only collapse if not already collapsed
    if (!plotSelectionContainer.classList.contains('collapsed')) {
      // If the click target is not inside the container
      if (!plotSelectionContainer.contains(event.target)) {
        plotSelectionContainer.classList.add('collapsed');
      }
    }
  });

  // Set up event handlers for datapoints in plots
  const datapoints = document.querySelectorAll('.datapoint');
  if (!isMobile) {
    datapoints.forEach(datapoint => {
      // Add hover effect
      datapoint.addEventListener('mouseenter', expandHandler);
    
      datapoint.addEventListener('touchstart', expandHandler);
    
      datapoint.addEventListener('mouseleave', e => shrinkHandler.call(datapoint, e, true));
    
      datapoint.addEventListener('touchend', e => shrinkHandler.call(datapoint, e, true));
    });
  }
  
  const legendItems = document.querySelectorAll('.legend-item');
  legendItems.forEach(item => {
    item.addEventListener('click', legendItemHandler);
  });

  const legendContents = document.querySelectorAll('.legend-item-content');
  legendContents.forEach(el => {
    el.addEventListener('scroll', handleLegendItemContentScroll);
    // Initial check in case content is already scrolled
    handleLegendItemContentScroll({target: el});
  });

  openSelectedChart();

});

</script>

{% endblock %}