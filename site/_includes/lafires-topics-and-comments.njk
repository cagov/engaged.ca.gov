<script>

let current_topic_index = 19;
let current_mood_filter = 'all';
let current_mood_time_ms = new Date().getTime();

document.addEventListener('DOMContentLoaded', function() {
  // Set up event handler for clicks on .findings-top-options-option-box
  document.querySelectorAll('.findings-top-options-option-box').forEach(function(box) {
    box.addEventListener('click', function() {
      // Remove 'active' from all option boxes
      document.querySelectorAll('.findings-top-options-option-box').forEach(function(el) {
        el.classList.remove('active');
      });
      document.querySelectorAll('.findings-top-discussion-container').forEach(function(el) {
        el.classList.remove('active');
      });
      // Add 'active' to the clicked box
      this.classList.add('active');
      // Add 'active' to the corresponding discussion container
      document.getElementById('findings-top-discussions-topic-' + this.dataset.topicNumber).classList.add('active');
      select_topic_chart(parseInt(this.dataset.chartTopicIndex, 10));
      current_topic_index = parseInt(this.dataset.chartTopicIndex, 10);
      populate_comments(current_topic_index, current_mood_filter);
    });
  });

  let commentExpander = document.getElementById('findings-deliberation-comments-show-button');
  commentExpander.addEventListener('click', function() {
    console.log('Comment expander clicked');
    let container = document.getElementById('topics-deliberation-comments-container');
    // populate it...
    populate_comments(current_topic_index, current_mood_filter);
    container.classList.remove('collapsed');
  });
  document.querySelectorAll('.deliberation-comment-expander-button.close').forEach(function(item) {
    item.addEventListener('click', function() {
        console.log('Comment hider clicked');
        let container = document.getElementById('topics-deliberation-comments-container');
        container.classList.add('collapsed');
    });
  });

  document.querySelectorAll('.topics-alignment-switcher-item').forEach(function(item) {
    item.addEventListener('click', function() {
      // INSERT_YOUR_CODE
      document.querySelectorAll('.topics-alignment-switcher-item').forEach(function(el) {
        el.classList.remove('selected');
      });
      this.classList.add('selected');
      current_mood_filter = this.dataset.filter;
      current_mood_time_ms = new Date().getTime();
      console.log("current_mood_filter", current_mood_filter);
      populate_comments(current_topic_index, current_mood_filter);
    });
  });
});

function populate_comments(topic_index, filter) {
    let cmarkup = '';
    let chart_data = global_chart_data;
    // console.log("chart_data", chart_data);
    let fUserRecords = chart_data.user_recs.filter(rec => rec.tid == topic_index-1);
    if (filter == 'support') {
      fUserRecords = fUserRecords.filter(rec => rec.v >= 6);
    } else if (filter == 'neutral') {
      fUserRecords = fUserRecords.filter(rec => rec.v >= 3 && rec.v <= 5);
    } else if (filter == 'oppose') {
      fUserRecords = fUserRecords.filter(rec => rec.v <= 2);
    }
    console.log("fUserRecords found:", fUserRecords.length);
    fUserRecords.forEach(rec => {
      let cid = rec.cid;
      if (cid >= 0 && cid < chart_data.comments.length) {
        let comment = chart_data.comments[cid];
        cmarkup += `<div class="deliberation-comment-item vote-${rec.v}"><div class="comment-fill">`;
        cmarkup += '“' + comment + '”';
        cmarkup += '</div></div>';
      }
    });
    let comment_container = document.getElementById('topics-deliberation-comments-container-content');  
    comment_container.innerHTML = cmarkup;
    // ScrollTrigger.refresh();
}

function legendItemHandler(e) {
  const legendItem = this;
  let is_collapsed = legendItem.classList.contains('collapsed');
  const expansionBlock = legendItem.querySelector('.legend-item-expansion-block');

  if (is_collapsed) {
    legendItem.classList.remove('collapsed');
    legendItem.setAttribute('aria-expanded', 'true');
    expansionBlock.setAttribute('aria-hidden', 'false');
  } else {
    legendItem.classList.add('collapsed');
    legendItem.setAttribute('aria-expanded', 'false');
    expansionBlock.setAttribute('aria-hidden', 'true');
  }
  is_collapsed = !is_collapsed;
  const nbrComments = legendItem.getAttribute('data-nbr-comments');
  const commentIds = legendItem.getAttribute('data-comment-ids');
  console.log('Legend item clicked:', nbrComments, commentIds);

  const legendItemContent = legendItem.querySelector('.legend-item-content');
  const parentElement = legendItemContent.parentElement;
  if (!is_collapsed) {
    let comment_list = '';
    const commentIdsArray = commentIds.split(',');
    for (let i = 0; i < nbrComments; i++) {
      comment_list += '<div class="deliberation-comment-item">';
      const cid = parseInt(commentIdsArray[i]);
      console.log("Looking up quote with comment id ", cid);
      const quote = quoteData.find(q => q.COMMENT_ID === cid);
      comment_list += '“' + quote.CONTENT + '”';
      comment_list += '</div>';
    }
    legendItemContent.innerHTML = comment_list;
    if (parentElement) {
      setLegendFade(parentElement, legendItemContent);
    }
  } else {
    legendItemContent.innerHTML = '';
  }
}

{# function setLegendFade(elem, childElement) {
    // Remove both classes first
    elem.classList.remove('fade-top', 'fade-bottom');
    // If not at the very top, add fade-top
    if (childElement.scrollTop > 0) {
      console.log('Adding fade-top');
      elem.classList.add('fade-top');
    }
    // If not at the very bottom, add fade-bottom
    if (childElement.scrollTop + childElement.clientHeight < childElement.scrollHeight - 1) {
      console.log('Adding fade-bottom');
      elem.classList.add('fade-bottom');
    }

}

function handleLegendItemContentScroll(e) {
  const el = e.target;
  const parentElement = el.parentElement;
  if (parentElement) {
    setLegendFade(parentElement, el);
  }
}

const legendContents = document.querySelectorAll('#topics-deliberation-comments-container-content');
  legendContents.forEach(el => {
    el.addEventListener('scroll', handleLegendItemContentScroll);
    // Initial check in case content is already scrolled
    handleLegendItemContentScroll({target: el});
  }); #}


</script>
